service: serverless-api-1
# app and org for use with dashboard.serverless.com
app: serverless-api-app
org: weicheng0324094

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  timeout: 30
  region: ap-southeast-1
  memorySize: 1024

plugins:
  - serverless-offline

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getReward:
    handler: handler.getReward
    events:
          - http:
              path: reward/{id}
              method: get
              cors: true
  getAllRewards:
    handler: handler.getAllRewards
    events:
          - http:
              path: rewards
              method: get
              cors: true
  createReward:
    handler: handler.createReward
    events:
          - http:
              path: reward
              method: post
              cors: true
  updateReward:
    handler: handler.updateReward
    events:
          - http:
              path: reward
              method: put
              cors: true
  deleteReward:
    handler: handler.deleteReward
    events:
          - http:
              path: reward/{id}
              method: delete
              cors: true
  redeemReward:
    handler: handler.redeemReward
    events:
          - http:
              path: reward/redeem
              method: post
              cors: true
  isRewardRedeem:
    handler: handler.isRewardRedeem
    events:
          - http:
              path: reward/redeem/check
              method: post
              cors: true 
  getVendor:
    handler: handler.getVendor
    events:
          - http:
              path: vendor/{id}
              method: get
              cors: true
  getAllVendors:
    handler: handler.getAllVendors
    events:
          - http:
              path: vendors
              method: get
              cors: true
  createVendor:
    handler: handler.createVendor
    events:
          - http:
              path: vendor
              method: post
              cors: true
  updateVendor:
    handler: handler.updateVendor
    events:
          - http:
              path: vendor
              method: put
              cors: true
  deleteVendor:
    handler: handler.deleteVendor
    events:
          - http:
              path: vendor/{id}
              method: delete
              cors: true
  getUploadImageLink:
    handler: handler.getUploadImageLink
    events:
          - http:
              path: file
              method: post
              cors: true
  getAllRewardTypes:
    handler: handler.getAllRewardTypes
    events:
          - http:
              path: rewardtypes
              method: get
              cors: true

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
